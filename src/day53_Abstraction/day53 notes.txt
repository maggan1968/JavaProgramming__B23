09/09/2021
Topics: Abstraction Continue
			Interface vs Abstract class
			extends vs implements

		OOP Polymorphism Intro


package name: day53_Abstraction

warmup task:

	WebDriver task:
		1. Create an interface named WebDriver
				abstract methods:
					get(String url);
					findElement(String locator);
					getTitle();
					quit();

		2. Create the following classes that implements the WebDriver
					1. ChromeDriver
					2. FireFoxDriver
					3. EdgeDriver

			Implement all the methods that are required


	Car Task
		1. create an abstract class named Car
				private variables:
					make (final), model (final), color, year (final), price

				Encapsulate all the fields

				Add a constructor to set all the fields

				abstract method:
					start();
					driver();

				non-abstract method:
					toString

		2. Create an interface named ElectricCar
				abstract method: charging();

		3. create an interface named AutoPark
				abstract method: autoPark();

		4. Create an interface named AutoPilot that extends AutoPark
				abstract method: selfDriving();

		5. Create the following sub classes of Car
				1. Honda
				2. Ford
				3. Porsche (implements AuotoPark)
				4. Audi (implements AuotoPark)
				5. Tesla (implements AuotoPark & AutoPilot)
				6. Nio (implements AuotoPark & AutoPilot)


			implement all the methods that are needed



Interface (not a class):

		public is the only available AM
variables are public static and final by default


		what we can have in an interface:
			variable: public static final by defult
			methods: abstract method
					 static method
					 default method

		what we cannot have:
			instance variables
			blocks
			constructor
			instance method

extends vs implements

	extends:
			class  extends class    (extends one class only)
			interface extends interfaces   (extends multiple interface)

	implements:

			class  implements  interfaces


	extends & implements:
			class extends class implments interfaces



Abstract class vs Interface: both are used for achieving abstraction
							 both meant to be inherited
							 both can not craete objects
							 both can not be final



				 Abstract class: one class can only extends one abstract class
				 			can have everything a regular class can

				 			4 access modifiers

				 interface: one class can implement multiple interfaces

				 			one access modifier

				 			variable: public static final by defult
							methods: abstract method, static method, default method





Polymorphism: "IS A relation" is a MUST
		polymorphism
		reference type vs object type
		instance keyword
		up & down casting

2 types of testings:

	1. Primitive type casting

			implicit: casting smaller type to larger type (done automatically)
					int a =100;
					double b = a;

			explicit: casting larger type to smaller type (manually done)
					double a =10.0;
					int b = (int)a;


	2. Referrence type casting. (There MUST be inheritance)

			up casting: casting smaller type to larger type (done automatically)

			down casting: casting larger type to smaller type (manually done)





